package com.example.inventory.inventory_api;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import java.util.List;
import java.util.Optional;
import java.util.UUID; // Important: We now use UUID

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
class InventoryApiApplicationTests {

    // Spring will automatically create and inject the Repository and Service for us.
    @Autowired
    private ProductRepository productRepository;

    private ProductService productService;

    @BeforeEach
    void setUp() {
        // Initialize the service with the injected repository.
        productService = new ProductService();
        productService.setProductRepository(productRepository);
    }

    // Helper to create a test product object
    private Product createTestProduct(String name, String description, int stock, int threshold) {
        Product p = new Product();
        p.setName(name);
        p.setDescription(description);
        p.setStockQuantity(stock);
        p.setLowStockThreshold(threshold);
        return p;
    }

    @Test
    void testCreateProduct() {
        Product newProduct = createTestProduct("Laptop", "A powerful laptop", 50, 10);
        Product createdProduct = productService.createProduct(newProduct);

        assertNotNull(createdProduct);
        assertNotNull(createdProduct.getId()); // ID should be generated by JPA/DB
        assertEquals("Laptop", createdProduct.getName());
    }

    @Test
    void testGetProductById() {
        Product newProduct = createTestProduct("Headphones", "Noise-cancelling.", 100, 20);
        Product createdProduct = productRepository.save(newProduct);

        // The ProductService now accepts a UUID for the ID
        Optional<Product> foundProduct = productService.getProductById(String.valueOf(createdProduct.getId()));

        assertTrue(foundProduct.isPresent());
        assertEquals(createdProduct.getId(), foundProduct.get().getId());
    }

    @Test
    void testUpdateProduct() {
        Product originalProduct = productRepository.save(createTestProduct("Old Product", "Old description", 50, 10));

        // 1. Get the original product from the DB to ensure we have the correct ID
        Product updates = productRepository.findById(originalProduct.getId()).get();

        // 2. Apply updates
        updates.setName("New Product Name");
        updates.setStockQuantity(60);
        updates.setLowStockThreshold(15);

        // The service method now expects the Product object with the updated fields
        Product result = productService.updateProduct(updates);

        assertNotNull(result);
        assertEquals("New Product Name", result.getName());
        assertEquals(60, result.getStockQuantity());
    }

    @Test
    void testUpdateProductWithNegativeStock() {
        Product product = productRepository.save(createTestProduct("Gadget", "A cool gadget", 50, 10));

        // We get the product and set the invalid value
        Product invalidUpdate = productRepository.findById(product.getId()).get();
        invalidUpdate.setStockQuantity(-5);

        // Ensure exception is thrown for invalid data.
        assertThrows(IllegalArgumentException.class, () -> {
            productService.updateProduct(invalidUpdate);
        });
    }

    @Test
    void testDeleteProduct() {
        Product product = productRepository.save(createTestProduct("Deletable Item", "...", 10, 5));

        // The service method now accepts a UUID
        assertTrue(productService.deleteProduct(String.valueOf(product.getId())));
        assertFalse(productService.getProductById(String.valueOf(product.getId())).isPresent());
    }

    @Test
    void testIncreaseStock() {
        Product product = productRepository.save(createTestProduct("Item", "...", 50, 10));

        // The service method now accepts a UUID
        Product updatedProduct = productService.increaseStock(String.valueOf(product.getId()), 20);

        assertNotNull(updatedProduct);
        assertEquals(70, updatedProduct.getStockQuantity());
        // Verify the change is persisted
        assertEquals(70, productRepository.findById(product.getId()).get().getStockQuantity());
    }

    @Test
    void testDecreaseStockInsufficientQuantity() {
        Product product = productRepository.save(createTestProduct("Item", "...", 10, 5));

        // This should fail because you can't remove 20 from 10.
        assertThrows(IllegalArgumentException.class, () -> {
            productService.decreaseStock(String.valueOf(product.getId()), 20);
        });
    }

    @Test
    void testGetLowStockProducts() {
        // Products where stock IS low
        productRepository.save(createTestProduct("Low Stock A", "...", 10, 20));
        productRepository.save(createTestProduct("Low Stock B", "...", 5, 5));

        // Product where stock is NOT low
        productRepository.save(createTestProduct("High Stock", "...", 100, 10));

        List<Product> lowStockProducts = productService.getLowStockProducts();

        // The total count will be 2 (A and B)
        assertEquals(2, lowStockProducts.size());
        // Simple check to ensure the high stock item is not present
        assertFalse(lowStockProducts.stream().anyMatch(p -> p.getName().equals("High Stock")));
    }
}

